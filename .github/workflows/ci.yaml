name: CI

on:
  # For the push event, it only sniffs branch 'develop/**' and let anything changes triggers CI for be safe of source
  # code.
  push:
    branches:
      - "master"
      - "develop/**"
    paths-ignore:
#     For GitHub dependency bot
      - ".github/dependabot.yaml"
#     For documentation
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/workflows/documentation.yaml"
      - "docs/**"
      - "**/*.md"
      - "mkdocs.yml"
      - "README.md"
#     For Docker feature
      - ".github/workflows/docker.yaml"
      - "scripts/ci/**-docker-**.sh"
      - "scripts/docker/**"
      - "Dockerfile"
      - "README-DOCKER.md"
#     Others
      - ".gitcommitrules"
      - ".gitignore"
      - ".pre-commit-config.yaml"
      - ".pylintrc"

  # For the pull request event, it sniffs branch 'develop/**', 'release' and 'master' and make sure anything would be
  # fine without any issue before review and merge.
  pull_request:
    branches:
      - "master"
      - "develop/**"
    paths-ignore:
#     For GitHub dependency bot
      - ".github/dependabot.yaml"
#     For documentation
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/workflows/documentation.yaml"
      - "docs/**"
      - "**/*.md"
      - "mkdocs.yml"
      - "README.md"
#     For Docker feature
      - ".github/workflows/docker.yaml"
      - "scripts/ci/**-docker-**.sh"
      - "scripts/docker/**"
      - "Dockerfile"
      - "README-DOCKER.md"
#     Others
      - ".gitcommitrules"
      - ".gitignore"
      - ".pre-commit-config.yaml"
      - ".pylintrc"
      - "LICENSE"

jobs:
  build-and-test:
#    name: Run all tests and organize all test reports
    uses: ./.github/workflows/rw_build_and_test.yaml


#  prep_unit-test:
##    name: Prepare all unit test items
#    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_get_tests.yaml@v5
#    with:
#      shell_arg: test/unit_test/
#
#
#  prep_integration-test:
##    name: Prepare all integration test items
#    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_get_tests.yaml@v5
#    with:
#      shell_arg: test/integration_test/
#
#
#  run_unit-test:
##    name: Run all unit test items
#    needs: prep_unit-test
#    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_poetry_run_test.yaml@v5
#    with:
#      test_type: unit-test
#      all_test_items_paths: ${{needs.prep_unit-test.outputs.all_test_items}}
#
#
#  run_integration-test:
##    name: Run all integration test items
#    needs: prep_integration-test
#    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_poetry_run_test.yaml@v5
#    with:
#      test_type: integration-test
#      all_test_items_paths: ${{needs.prep_integration-test.outputs.all_test_items}}
#
#
#  all_test_codecov:
##    name: Organize and generate the testing report and upload it to Codecov
#    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == 'master') }}
#    needs: [run_unit-test, run_integration-test]
#    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_organize_test_cov_reports.yaml@v5
#    with:
#      test_type: all-test


  codecov_finish:
#    name: Organize and generate the testing report and upload it to Codecov
#    needs: all_test_codecov
    needs: build-and-test
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_upload_test_cov_report.yaml@v5
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      test_type: all-test
      upload-to-codecov: true
      codecov_flags: unit,integration  # Required if 'upload-to-codecov' is true
      codecov_name: pymock-api  # Required if 'upload-to-codecov' is true


  sonarcloud_finish:
#    name: SonarCloud Scan
#    needs: all_test_codecov
    needs: build-and-test
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_sonarqube_scan.yaml@v5
    secrets:
      sonar_token: ${{ secrets.SONAR_TOKEN }}
    with:
      download_path: ${{ inputs.download_path }}


  pre-building_test:
#    name: Check about it could work finely by installing the Python package with setup.py file
    needs: [codecov_finish, sonarcloud_finish]
    if: ${{ github.ref_name == 'release' || github.ref_name == 'master' }}
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/rw_pre-building_test.yaml@v5
    with:
      build-type: poetry
      python_package_name: pymock-api
      test_shell_in_python: from pymock_api.model import APIConfig
      test_shell: mock-api --help
