name: CI

on:
  push:
    branches:
      - "develop/**"

  pull_request:
    branches:
      - "develop/**"
      - "release"
      - "master"

  paths-ignore:
#       For documentation
    - ".github/ISSUE_TEMPLATE/**"
    - ".github/workflows/documentation.yaml"
    - "docs/**"
    - "mkdocs.yml"
    - "README.md"
#       For Docker feature
    - ".github/workflows/docker.yaml"
    - "scripts/ci/**-docker-**.sh"
    - "scripts/docker/**"
    - "Dockerfile"
    - "README-DOCKER.md"
#       Others
    - ".gitcommitrules"
    - ".gitignore"
    - ".pre-commit-config.yaml"
    - ".pylintrc"
    - "LICENSE"

jobs:
  prep-testbed_unit-test:
#    name: Prepare all unit test items
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/prepare_test_items.yaml@v4
    with:
      shell_path: scripts/ci/get-unit-test-paths.sh
      shell_arg: unix


  prep-testbed_integration-test:
#    name: Prepare all integration test items
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/prepare_test_items.yaml@v4
    with:
      shell_path: scripts/ci/get-integration-test-paths.sh
      shell_arg: unix


  run_unit-test:
#    name: Run all unit test items
    needs: prep-testbed_unit-test
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/poetry_run_test_via_pytest.yaml@develop
    with:
      test_type: unit-test
      all_test_items_paths: ${{needs.prep-testbed_unit-test.outputs.all_test_items}}


  run_integration-test:
#    name: Run all integration test items
    needs: prep-testbed_integration-test
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/poetry_run_test_via_pytest.yaml@develop
    with:
      test_type: integration-test
      all_test_items_paths: ${{needs.prep-testbed_integration-test.outputs.all_test_items}}
#      debug_mode: true


  all-test_codecov:
#    name: Organize and generate the testing report and upload it to Codecov
    if: ${{ github.event_name == 'push' }}
    needs: [run_unit-test, run_integration-test]
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/organize_and_generate_test_cov_reports.yaml@v4
    with:
      test_type: all-test


  codecov_finish:
#    name: Organize and generate the testing report and upload it to Codecov
    needs: all-test_codecov
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/upload_test_cov_report.yaml@develop
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      test_type: all-test
      upload-to-codecov: true
      codecov_flags: unit,integration  # Required if 'upload-to-codecov' is true
      codecov_name: pymock-api  # Required if 'upload-to-codecov' is true


#  coveralls_finish:
##    name: Organize and generate the testing report and upload it to Coveralls
#    needs: all-test_codecov
#    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/upload_test_cov_report.yaml@v4
#    secrets:
#      coveralls_token: ${{ secrets.COVERALLS_TOKEN }}
#    with:
#      test_type: unit-test
#      upload-to-coveralls: true


  sonarcloud_finish:
#    name: SonarCloud Scan
    needs: all-test_codecov
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download code coverage result files which has be handled by different test type process
        uses: actions/download-artifact@v3
        with:
          name: test_coverage_xml_report
          path: ${{ inputs.download_path }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  pre-building_test:
#    name: Check about it could work finely by installing the Python package with setup.py file
    needs: [codecov_finish, sonarcloud_finish]
    if: ${{ github.ref_name == 'release' || github.ref_name == 'master' && github.event_name == 'push' }}
    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/pre-building_test.yaml@develop
    with:
      build-type: poetry
      python_package_name: pymock-api
      test_shell_in_python: from pymock_api.model import APIConfig
      test_shell: mock-api --help


#  build_git-tag_and_create_github-release:
##    name: Build git tag and GitHub release if it needs
#    needs: pre-building_test
#    if: ${{ github.ref_name == 'master' && github.event_name == 'push' }}
#    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/build_git-tag_and_create_github-release.yaml@v4
#    secrets:
#      github_auth_token: ${{ secrets.GITHUB_TOKEN }}
#    with:
#      project_type: python-package
#      project_name: pymock_api
#      software_version_format: general-3
#
#
#  push_python_pkg_to_pypi:
##    name: Check about it could work finely by installing the Python package with setup.py file
#    needs: build_git-tag_and_create_github-release
#    if: ${{ github.ref_name == 'master' && github.event_name == 'push' }}
#    uses: Chisanan232/GitHub-Action_Reusable_Workflows-Python/.github/workflows/push_pkg_to_pypi.yaml@v4
#    with:
#      release-type: ${{ needs.build_git-tag_and_create_github-release.outputs.python_release_version }}
#      push-to-PyPI: official
#    secrets:
#      pypi_user: ${{ secrets.PYPI_USERNAME }}
#      pypi_token: ${{ secrets.PYPI_PASSWORD }}

